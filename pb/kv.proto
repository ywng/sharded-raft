syntax = "proto3";

package pb;

// Represents a single key, used for gets.
message Key {
    string key = 1;
}

// Represents a single value, can be used for put etc.
message Value {
    string value = 1;
}

// Represent a key-value pair that is used to return results.
message KeyValue {
    string key = 1;
    string value = 2;
}

// Represent a void message indicating success
message Success {
}

// Represent a void message indicating success
message Failure {
    string msg = 1;
}

// Represents an error.
message Error {
    string msg = 1;
}

// Represents an argument for CAS
message CASArg {
    KeyValue kv = 1;
    Value value = 2;
}

// Represents an empty message
message Empty {}

// Represents a case where we need the client to connect
// to another server.
message Redirect {
    string server = 1;
}

// Wrong shard group, redirect to the right shard group or 
// client can query the shard master for latest config
message ErrWrongGroup {
    ShardConfig config = 1;
}

// Represents an operation result.
message Result {
    oneof result {
        Redirect redirect = 1;
        KeyValue kv = 2;
        Success s = 3;
        ErrWrongGroup wrongG = 4;
        Failure failure = 5;
        ShardConfig config = 6;
    }
}

// KvStore service
service KvStore {
    rpc Get (Key) returns (Result) {}
    rpc Set (KeyValue) returns (Result) {}
    rpc Clear(Empty) returns (Result) {}
    rpc CAS(CASArg) returns (Result) {} 
    rpc ShardMigration(ShardMigrationArgs) returns (ShardMigrationReply) {}
    //this is raft membership config, not shard config
    rpc ChangeConfiguration(Servers) returns (Result) {}

}

// Internal representations for operations.
enum Op {
    GET = 0;
    SET = 1;
    CLEAR = 2;
    CAS = 3;
    JOIN = 4;
    LEAVE = 5;
    MOVE = 6;
    QUERY = 7;
    SHARD_CONFIG = 8;
    CONFIG_CHG = 9;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        Key get = 2;
        KeyValue set = 3;
        Empty clear = 4;
        CASArg cas = 5;
        JoinArgs joinArgs = 6;
        LeaveArgs leaveArgs = 7;
        MoveArgs moveArgs = 8;
        QueryArgs queryArgs = 9;
        ShardConfig shardConfig = 10;
        Servers servers = 11;
    }
}

message Servers {
    string currList = 1;
    string newList = 2;
}

// A log entry
message Entry {
    int64 term = 1;
    int64 index = 2;
    Command cmd = 3;
}

// Input to AppendEntries (as defined in Figure 2)
message AppendEntriesArgs {
    int64 term = 1;
    string leaderID = 2;
    int64 prevLogIndex = 3;
    int64 prevLogTerm = 4;
    int64 leaderCommit = 5;
    repeated Entry entries = 6;
}

// Output from AppendEntries
message AppendEntriesRet {
    int64 term = 1;
    bool success = 2;
}

// Input to InstallSnapshot
message InstallSnapshotArgs {
    int64 term = 1;
    string leaderID = 2;
    Entry lastLogEntry = 3;
    bytes data = 4;
}

// Output from InstallSnapshot
message InstallSnapshotRet {
    int64 term = 1;
    bool success = 2;
}

// Input to RequestVote
message RequestVoteArgs {
    int64 term = 1;
    string candidateID = 2;
    int64 lastLogIndex = 3;
    int64 lasLogTerm = 4;
}

// Output from RequestVote
message RequestVoteRet {
    int64 term = 1;
    bool voteGranted = 2;
}

// Raft service
service Raft {
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesRet) {}
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteRet) {}
    rpc InstallSnapshot(InstallSnapshotArgs) returns (InstallSnapshotRet) {}
}

//============================= for shard master =================================//
message ServerList {
    repeated string list = 1;
}

message GroupIDs {
    repeated int64 ids = 1;
}

message ShardsMapping {
    repeated int64 gids = 1;
}

message GroupServersMap {
    map<int64, ServerList> map = 1;
}

message ShardConfig {
    int64 num = 1;
    ShardsMapping shardsGroupMap = 2;
    GroupServersMap servers = 3;
    int64 maxConfigNum = 4;
}

message JoinArgs {
    GroupServersMap servers = 1; 
}

message LeaveArgs {
    GroupIDs gids = 1;
}

message MoveArgs {
    int64 shard = 1;
    int64 gid = 2;
}

message QueryArgs {
    int64 num = 1; // desired config number
}

message ShardMigrationArgs {
    int64   shard = 1;
    int64   configNum = 2;
}

message ShardMigrationReply {
    map<string, string> migStore = 1;
    bool success = 2;
}

// Shard master service
service ShardMaster {
    rpc Join(JoinArgs) returns (Result) {}
    rpc Leave(LeaveArgs) returns (Result) {}
    rpc Move(MoveArgs) returns (Result) {}
    rpc Query(QueryArgs) returns (Result) {}
    //this is raft membership config, not shard config
    rpc ChangeConfiguration(Servers) returns (Result) {}
}